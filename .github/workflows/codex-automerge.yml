# name: Codex Auto-merge (by label, live, target)

# on:
#   pull_request_target:
#     types:
#       - labeled
#       - opened
#       - reopened
#       - synchronize
#       - ready_for_review
#       - edited
#       - unlabeled

# permissions:
#   contents: write
#   pull-requests: write

# concurrency:
#   group: codex-automerge-${{ github.event.pull_request.number }}
#   cancel-in-progress: false

# jobs:
#   enable_auto_merge:
#     runs-on: ubuntu-latest
#     env:
#       TARGET_LABEL: "codexAutomerge"

#     steps:
#       - name: Resolve PR/REPO
#         id: ctx
#         run: |
#           echo "PR=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"
#           echo "REPO=${{ github.repository }}" >> "$GITHUB_OUTPUT"

#       - name: Check label via GitHub API (live)
#         id: check
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           PR:  ${{ steps.ctx.outputs.PR }}
#           REPO: ${{ steps.ctx.outputs.REPO }}
#           TARGET_LABEL: ${{ env.TARGET_LABEL }}
#         run: |
#           set -euo pipefail
#           gh pr view "$PR" --repo "$REPO" --json labels > labels.json
#           echo "Current labels:"; jq -r '.labels[].name' labels.json || true
#           if jq -e --arg L "$TARGET_LABEL" '[.labels[].name] | index($L) != null' labels.json >/dev/null; then
#             echo "has_label=true" >> "$GITHUB_OUTPUT"
#           else
#             echo "has_label=false" >> "$GITHUB_OUTPUT"
#           fi

#       - name: Exit if label missing
#         if: steps.check.outputs.has_label != 'true'
#         run: |
#           echo "No '${{ env.TARGET_LABEL }}' label on PR; skipping auto-merge."
#           exit 0

#       - name: Show PR state (diagnostics)
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           PR:  ${{ steps.ctx.outputs.PR }}
#           REPO: ${{ steps.ctx.outputs.REPO }}
#         run: |
#           set -euo pipefail
#           gh pr view "$PR" --repo "$REPO" --json \
#             isDraft,mergeable,mergeStateStatus,reviewDecision,autoMergeRequest,title,number,baseRefName,headRefName \
#             | jq .

#       - name: Merge now (if CLEAN) or enable auto-merge (try all methods)
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           PR:  ${{ steps.ctx.outputs.PR }}
#           REPO: ${{ steps.ctx.outputs.REPO }}
#         run: |
#           set -euo pipefail
#           STATE=$(gh pr view "$PR" --repo "$REPO" --json mergeStateStatus -q .mergeStateStatus || echo unknown)
#           echo "mergeStateStatus=$STATE"

#           try_merge_now () {
#             for m in --squash --merge --rebase; do
#               echo "Trying immediate merge with $m..."
#               if gh pr merge "$PR" --repo "$REPO" "$m" --admin 2>/dev/null \
#                  || gh pr merge "$PR" --repo "$REPO" "$m" 2>/dev/null; then
#                 echo "::notice::Merged immediately ($m)"; return 0
#               fi
#             done
#             return 1
#           }

#           try_enable_auto () {
#             for m in --squash --merge --rebase; do
#               echo "Trying enable auto-merge with $m..."
#               if gh pr merge "$PR" --repo "$REPO" "$m" --auto 2>/dev/null; then
#                 echo "::notice::Auto-merge enabled ($m)"; return 0
#               fi
#             done
#             return 1
#           }

#           if [ "$STATE" = "CLEAN" ]; then
#             if try_merge_now; then exit 0; fi
#             echo "::warning::Immediate merge failed for all methods; enabling auto-merge…"
#           fi

#           if try_enable_auto; then
#             exit 0
#           fi

#           echo "::error::All merge methods failed. Likely branch protection blocks (reviews/up-to-date)."
#           exit 1





          
name: Codex Auto-merge (simple)

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - ready_for_review
      - synchronize
      - edited
      - labeled
      - unlabeled

permissions:
  pull-requests: write
  contents: write

concurrency:
  group: codex-automerge-${{ github.event.pull_request.number }}
  cancel-in-progress: false

jobs:
  enable_auto_merge:
    runs-on: ubuntu-latest
    env:
      TARGET_LABEL: "codexAutomerge"   # метка, по которой разрешаем авто-мердж
      MERGE_METHOD: "--squash"         # фиксируем способ мержа: --squash | --merge | --rebase

    steps:
      - name: Resolve PR/REPO
        id: ctx
        run: |
          echo "PR=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"
          echo "REPO=${{ github.repository }}" >> "$GITHUB_OUTPUT"

      - name: Check label (live via API)
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR:  ${{ steps.ctx.outputs.PR }}
          REPO: ${{ steps.ctx.outputs.REPO }}
          TARGET_LABEL: ${{ env.TARGET_LABEL }}
        run: |
          set -euo pipefail
          gh pr view "$PR" --repo "$REPO" --json labels > labels.json
          if jq -e --arg L "$TARGET_LABEL" '[.labels[].name] | index($L) != null' labels.json >/dev/null; then
            echo "has_label=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_label=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Exit if label missing
        if: steps.check.outputs.has_label != 'true'
        run: |
          echo "No '${{ env.TARGET_LABEL }}' label on PR; skipping."
          exit 0

      - name: Enable auto-merge (or merge immediately if eligible)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR:  ${{ steps.ctx.outputs.PR }}
          REPO: ${{ steps.ctx.outputs.REPO }}
          METHOD: ${{ env.MERGE_METHOD }}
        run: |
          set -euo pipefail
          # Включаем авто-мердж выбранным способом.
          # Если PR уже удовлетворяет всем правилам, GitHub сольёт сразу.
          gh pr merge "$PR" --repo "$REPO" "$METHOD" --auto
          echo "::notice::Auto-merge set for PR #$PR ($METHOD)"

