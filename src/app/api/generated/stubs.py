"""Auto-generated API handler stubs.

Generated by scripts/gen_stubs.py.
Source contract version: 0.1.1
Do not edit manually — regenerate the file after changing the contracts.
"""

from __future__ import annotations

from typing import Any, Callable, Dict, Tuple

__all__ = ["ROUTE_HANDLERS"]



def get_api_jobs(*args: Any, **kwargs: Any) -> None:
    """
    Получить список задач ingest-очереди

    Возвращает административный список задач с агрегированными метриками ожидания и дедлайнами, вычисленными напрямую из `job.expires_at`. Требует право `stats:read`.
    """
    raise NotImplementedError("Implement handler for GET /api/jobs")


def get_api_jobs_by_job_id(*args: Any, **kwargs: Any) -> None:
    """
    Получить подробную информацию о задаче

    Возвращает полную запись задачи, её дедлайн `expires_at` и рассчитанные метрики оставшегося времени. Требует право `stats:read`.
    """
    raise NotImplementedError("Implement handler for GET /api/jobs/{job_id}")


def post_api_login(*args: Any, **kwargs: Any) -> None:
    """Вход пользователя и выдача JWT"""
    raise NotImplementedError("Implement handler for POST /api/login")


def post_api_media_cache_purge(*args: Any, **kwargs: Any) -> None:
    """
    Поставить задачу очистки медиа-кеша

    Требует право `settings:write`. Планирует асинхронное удаление устаревших Result и media_object
    """
    raise NotImplementedError("Implement handler for POST /api/media/cache/purge")


def post_api_media_register(*args: Any, **kwargs: Any) -> None:
    """Зарегистрировать временное медиа и получить публичную ссылку"""
    raise NotImplementedError("Implement handler for POST /api/media/register")


def get_api_providers(*args: Any, **kwargs: Any) -> None:
    """Получить короткий справочник провайдеров"""
    raise NotImplementedError("Implement handler for GET /api/providers")


def get_api_settings(*args: Any, **kwargs: Any) -> None:
    """
    Получить глобальные настройки платформы

    Требует право `settings:read`. Возвращает статус секретов, настройки таймаута ingest и связанные TTL медиахранилища
    """
    raise NotImplementedError("Implement handler for GET /api/settings")


def put_api_settings(*args: Any, **kwargs: Any) -> None:
    """
    Обновить глобальные настройки и секреты

    Требует право `settings:write`. Обновляет только переданные поля и возвращает актуальные значения, включая новое значение `T_sync_response`.
    """
    raise NotImplementedError("Implement handler for PUT /api/settings")


def get_api_slots(*args: Any, **kwargs: Any) -> None:
    """Получить список статических ingest-слотов"""
    raise NotImplementedError("Implement handler for GET /api/slots")


def get_api_slots_by_slot_id(*args: Any, **kwargs: Any) -> None:
    """
    Получить данные конкретного слота

    Возвращает полную конфигурацию слота вместе с массивом `recent_results`, содержащим последние успешные задачи с публичными ссылками на скачивание итоговых изображений.
    """
    raise NotImplementedError("Implement handler for GET /api/slots/{slot_id}")


def put_api_slots_by_slot_id(*args: Any, **kwargs: Any) -> None:
    """Обновить настройки слота"""
    raise NotImplementedError("Implement handler for PUT /api/slots/{slot_id}")


def post_api_slots_by_slot_id_reset_stats(*args: Any, **kwargs: Any) -> None:
    """Сбросить статистику слота"""
    raise NotImplementedError("Implement handler for POST /api/slots/{slot_id}/reset_stats")


def get_api_stats_global(*args: Any, **kwargs: Any) -> None:
    """Получить агрегированную статистику по слотам"""
    raise NotImplementedError("Implement handler for GET /api/stats/global")


def get_api_stats_by_slot_id(*args: Any, **kwargs: Any) -> None:
    """Получить статистику по слоту"""
    raise NotImplementedError("Implement handler for GET /api/stats/{slot_id}")


def post_api_template_media_register(*args: Any, **kwargs: Any) -> None:
    """Загрузить шаблон и привязать его к слоту"""
    raise NotImplementedError("Implement handler for POST /api/template-media/register")


def delete_api_template_media_by_id(*args: Any, **kwargs: Any) -> None:
    """Удалить шаблонное медиа и отвязать от слота"""
    raise NotImplementedError("Implement handler for DELETE /api/template-media/{id}")


def post_ingest_by_slotid(*args: Any, **kwargs: Any) -> None:
    """
    Принять ingest-запрос от DSLR Remote Pro

    Эндпоинт принимает multipart/form-data с исходной фотографией и глобальным паролем. Дополнительные текстовые поля не валидируются и сохраняются как метаданные. Ограничение ожидания ответа определяется `T_sync_response` (настраивается администратором в диапазоне 45–60 секунд); Ingest API удерживает соединение и раз в секунду читает запись `Job` из БД, ожидая финализации без дополнительных уведомлений. По истечении окна клиент получает 504, задача немедленно завершается и дальнейший polling провайдера по `provider_job_reference` не выполняется.
    """
    raise NotImplementedError("Implement handler for POST /ingest/{slotId}")


def get_public_media_by_id(*args: Any, **kwargs: Any) -> None:
    """Получить временный файл по публичной ссылке"""
    raise NotImplementedError("Implement handler for GET /public/media/{id}")


def get_public_results_by_job_id(*args: Any, **kwargs: Any) -> None:
    """
    Скачать итоговый файл обработки

    Публичная ссылка на итоговое изображение Job. Доступна 72 часа (`T_result_retention`) после финализации. После истечения срока возвращает `410 Gone`.
    """
    raise NotImplementedError("Implement handler for GET /public/results/{job_id}")


ROUTE_HANDLERS: Dict[Tuple[str, str], Callable[..., Any]] = {
    ("GET", "/api/jobs"): get_api_jobs,
    ("GET", "/api/jobs/{job_id}"): get_api_jobs_by_job_id,
    ("POST", "/api/login"): post_api_login,
    ("POST", "/api/media/cache/purge"): post_api_media_cache_purge,
    ("POST", "/api/media/register"): post_api_media_register,
    ("GET", "/api/providers"): get_api_providers,
    ("GET", "/api/settings"): get_api_settings,
    ("PUT", "/api/settings"): put_api_settings,
    ("GET", "/api/slots"): get_api_slots,
    ("GET", "/api/slots/{slot_id}"): get_api_slots_by_slot_id,
    ("PUT", "/api/slots/{slot_id}"): put_api_slots_by_slot_id,
    ("POST", "/api/slots/{slot_id}/reset_stats"): post_api_slots_by_slot_id_reset_stats,
    ("GET", "/api/stats/global"): get_api_stats_global,
    ("GET", "/api/stats/{slot_id}"): get_api_stats_by_slot_id,
    ("POST", "/api/template-media/register"): post_api_template_media_register,
    ("DELETE", "/api/template-media/{id}"): delete_api_template_media_by_id,
    ("POST", "/ingest/{slotId}"): post_ingest_by_slotid,
    ("GET", "/public/media/{id}"): get_public_media_by_id,
    ("GET", "/public/results/{job_id}"): get_public_results_by_job_id,
}

